@model IEnumerable<Shop.Core.Models.Entities.Product>

@{
    ViewData["Title"] = "Product List";
}


<div class="container d-flex justify-content-center align-items-center">
    <div class="w-75">

        <!-- Tytuł + przycisk Add Product Maybe craete .tag for re creating this as header and provide diff name and provide posibility to add more buttons (updated or something)-->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="mb-0">@ViewData["Title"]</h2>
            <button type="button" class="btn btn-primary btn-sm" id="btnAddProduct" 
                    data-bs-toggle="modal" data-bs-target="#addProductModal">
                <i class="bi bi-plus me-1"></i> Add Product
            </button>
        </div>
       
        <div id="productTableContainer">
            @await Html.PartialAsync("_ProductTablePartial", Model)
        </div>

    </div>
</div>

<!-- Add Product Modal tabindex="-1" <- close modal using Esc | Move modal to separate file-->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">Add New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form id="addProductForm">
                    <div class="mb-3">
                        <label for="productName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="productName" placeholder="Enter product name">
                    </div>

                    <div class="mb-3">
                        <label for="productDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="productDescription" rows="3" placeholder="Enter description"></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="productCategories" class="form-label">Categories</label>
                        <input type="text" class="form-control" id="productCategories" placeholder="Enter categories (comma-separated)">
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" form="addProductForm">Submit</button>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ✅ Pobiera najnowszą tabelę z serwera i przypina eventy ponownie
        async function reloadProductTable() {
            const html = await fetch('/Product/ProductTable').then(r => r.text());
            document.getElementById('productTableContainer').innerHTML = html;
            bindDeleteButtons(); // ponownie przypnij clicki
        }

        // ✅ Obsługuje kliknięcia przycisków Delete
        function bindDeleteButtons() {
            const deleteButtons = document.querySelectorAll('.btn-delete-product');
            deleteButtons.forEach(button => {
                button.addEventListener('click', async function () {
                    const name = this.dataset.name;
                    if (!confirm(`Delete product "${name}"?`)) return;

                    try {
                        const response = await fetch(`/Product/Delete/${encodeURIComponent(name)}`, {
                            method: 'POST'
                        });

                        if (response.ok) {
                            await reloadProductTable(); // odśwież tabelę po usunięciu
                        } else {
                            alert("Error deleting product.");
                        }
                    } catch (error) {
                        console.error(error);
                        alert("Unexpected error.");
                    }
                });
            });
        }

        // ✅ Obsługuje dodanie nowego produktu z formularza modalnego
        document.addEventListener('DOMContentLoaded', function () {
            // przypnij delete'y po załadowaniu
            bindDeleteButtons();

            const form = document.getElementById('addProductForm');
            form?.addEventListener('submit', async function (e) {
                e.preventDefault();

                const name = document.getElementById('productName').value.trim();
                const description = document.getElementById('productDescription').value.trim();
                const categories = document.getElementById('productCategories').value
                    .split(',')
                    .map(c => c.trim())
                    .filter(c => c.length > 0);

                const dto = { name, description, categories };

                try {
                    const response = await fetch('/Product/Create', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(dto)
                    });

                    if (response.ok) {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('addProductModal'));
                        modal?.hide();
                        form.reset();

                        await reloadProductTable(); // odśwież widok
                    } else {
                        alert('Failed to add product.');
                    }
                } catch (error) {
                    console.error(error);
                    alert('Unexpected error during create.');
                }
            });
        });
    </script>
}