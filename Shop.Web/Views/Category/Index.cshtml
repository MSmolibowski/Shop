@model IEnumerable<Shop.Core.Models.Entities.Category>

@{
    ViewData["Title"] = "Category List";
}
<div class="container">
    <div class="mx-auto" style="max-width: 900px;">

        <h2 class="mb-3">@ViewData["Title"]</h2>

        <div class="mb-4">
            <div class="btn-group" role="group" aria-label="Product actions">         
                <div>
                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
                        <i class="bi bi-plus me-1"></i> Add Category
                    </button>
                </div>
            </div>
        </div> 

        <div id="categoryTableContainer">
            @await Html.PartialAsync("_CategoryTablePartial", Model)
        </div>
    </div>
</div>

<div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="addCategoryModalLabel">Add New Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form id="addCategoryForm">
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="categoryName" placeholder="Enter category name" required />
                    </div>

                    <div class="mb-3">
                        <label for="categoryDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="categoryDescription" rows="3" placeholder="Enter description"></textarea>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" form="addCategoryForm">Submit</button>
            </div>

        </div>
    </div>
</div>
@section Scripts {
    <script>
        async function reloadCategoryTable() {
            const html = await fetch('/Category/Table').then(r => r.text());
            document.getElementById('categoryTableContainer').innerHTML = html;
            initializeCategoryDataTable();
            bindDeleteCategoryButtons();
        }

        function initializeCategoryDataTable() {
            const table = $('#categoriesTable');
            if ($.fn.dataTable.isDataTable('#categoriesTable')) {
                table.DataTable().destroy();
            }

            table.DataTable({
                paging: true,
                searching: true,
                ordering: true,
                info: true,
                responsive: true
            });
        }

        function bindDeleteCategoryButtons() {
            const buttons = document.querySelectorAll('.btn-delete-category');
            buttons.forEach(button => {
                button.addEventListener('click', async function () {
                    const name = this.dataset.name;

                    if (!confirm(`Delete category "${name}"?`)) return;

                    try {
                        const response = await fetch(`/Category/Delete/${encodeURIComponent(name)}`, {
                            method: 'POST'
                        });

                        if (response.ok) {
                            await reloadCategoryTable();
                            showToastSuccess(`Removed category: ${name}`);
                        } else {
                            const error = await response.text();
                            console.error(error);
                            showToastError(error);
                        }
                    } catch (error) {
                        console.error(error);
                        showToastError(error.message);
                    }
                });
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('addCategoryForm');

            form?.addEventListener('submit', async function (e) {
                e.preventDefault();

                const name = document.getElementById('categoryName').value.trim();
                const description = document.getElementById('categoryDescription').value.trim();

                const dto = { name, description };

                try {
                    const response = await fetch('/Category/Create', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(dto)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        const modal = bootstrap.Modal.getInstance(document.getElementById('addCategoryModal'));
                        modal?.hide();
                        form.reset();

                        showToastSuccess(`Added category: ${result.name}`);
                        await reloadCategoryTable();
                    } else {
                        const error = await response.json();
                        showToastError(error.message || "Failed to create category.");
                    }
                } catch (error) {
                    console.error(error);
                    showToastError(error.message);
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            initializeCategoryDataTable();
            bindDeleteCategoryButtons();
        });
    </script>
}